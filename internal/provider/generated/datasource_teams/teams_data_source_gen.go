// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_teams

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func TeamsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"teams": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time the team was created.",
							MarkdownDescription: "The date and time the team was created.",
						},
						"custom_server_limit": schema.StringAttribute{
							Computed:            true,
							Description:         "The custom server limit.",
							MarkdownDescription: "The custom server limit.",
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of the team.",
							MarkdownDescription: "The description of the team.",
						},
						"discord_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether Discord is enabled or not.",
							MarkdownDescription: "Whether Discord is enabled or not.",
						},
						"discord_notifications_database_backups": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send database backup notifications via Discord.",
							MarkdownDescription: "Whether to send database backup notifications via Discord.",
						},
						"discord_notifications_deployments": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send deployment notifications via Discord.",
							MarkdownDescription: "Whether to send deployment notifications via Discord.",
						},
						"discord_notifications_scheduled_tasks": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send scheduled task notifications via Discord.",
							MarkdownDescription: "Whether to send scheduled task notifications via Discord.",
						},
						"discord_notifications_server_disk_usage": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send server disk usage notifications via Discord.",
							MarkdownDescription: "Whether to send server disk usage notifications via Discord.",
						},
						"discord_notifications_status_changes": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send status change notifications via Discord.",
							MarkdownDescription: "Whether to send status change notifications via Discord.",
						},
						"discord_notifications_test": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send test notifications via Discord.",
							MarkdownDescription: "Whether to send test notifications via Discord.",
						},
						"discord_webhook_url": schema.StringAttribute{
							Computed:            true,
							Description:         "The Discord webhook URL.",
							MarkdownDescription: "The Discord webhook URL.",
						},
						"id": schema.Int64Attribute{
							Computed:            true,
							Description:         "The unique identifier of the team.",
							MarkdownDescription: "The unique identifier of the team.",
						},
						"members": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"created_at": schema.StringAttribute{
										Computed:            true,
										Description:         "The date when the user was created.",
										MarkdownDescription: "The date when the user was created.",
									},
									"email": schema.StringAttribute{
										Computed:            true,
										Description:         "The user email.",
										MarkdownDescription: "The user email.",
									},
									"email_verified_at": schema.StringAttribute{
										Computed:            true,
										Description:         "The date when the user email was verified.",
										MarkdownDescription: "The date when the user email was verified.",
									},
									"force_password_reset": schema.BoolAttribute{
										Computed:            true,
										Description:         "The flag to force the user to reset the password.",
										MarkdownDescription: "The flag to force the user to reset the password.",
									},
									"id": schema.Int64Attribute{
										Computed:            true,
										Description:         "The user identifier in the database.",
										MarkdownDescription: "The user identifier in the database.",
									},
									"marketing_emails": schema.BoolAttribute{
										Computed:            true,
										Description:         "The flag to receive marketing emails.",
										MarkdownDescription: "The flag to receive marketing emails.",
									},
									"name": schema.StringAttribute{
										Computed:            true,
										Description:         "The user name.",
										MarkdownDescription: "The user name.",
									},
									"two_factor_confirmed_at": schema.StringAttribute{
										Computed:            true,
										Description:         "The date when the user two factor was confirmed.",
										MarkdownDescription: "The date when the user two factor was confirmed.",
									},
									"updated_at": schema.StringAttribute{
										Computed:            true,
										Description:         "The date when the user was updated.",
										MarkdownDescription: "The date when the user was updated.",
									},
								},
								CustomType: MembersType{
									ObjectType: types.ObjectType{
										AttrTypes: MembersValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "The members of the team.",
							MarkdownDescription: "The members of the team.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the team.",
							MarkdownDescription: "The name of the team.",
						},
						"personal_team": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether the team is personal or not.",
							MarkdownDescription: "Whether the team is personal or not.",
						},
						"resend_api_key": schema.StringAttribute{
							Computed:            true,
							Description:         "The resending API key.",
							MarkdownDescription: "The resending API key.",
						},
						"resend_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to enable resending or not.",
							MarkdownDescription: "Whether to enable resending or not.",
						},
						"show_boarding": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to show the boarding screen or not.",
							MarkdownDescription: "Whether to show the boarding screen or not.",
						},
						"smtp_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether SMTP is enabled or not.",
							MarkdownDescription: "Whether SMTP is enabled or not.",
						},
						"smtp_encryption": schema.StringAttribute{
							Computed:            true,
							Description:         "The SMTP encryption.",
							MarkdownDescription: "The SMTP encryption.",
						},
						"smtp_from_address": schema.StringAttribute{
							Computed:            true,
							Description:         "The email address to send emails from.",
							MarkdownDescription: "The email address to send emails from.",
						},
						"smtp_from_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name to send emails from.",
							MarkdownDescription: "The name to send emails from.",
						},
						"smtp_host": schema.StringAttribute{
							Computed:            true,
							Description:         "The SMTP host.",
							MarkdownDescription: "The SMTP host.",
						},
						"smtp_notifications_database_backups": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send database backup notifications via SMTP.",
							MarkdownDescription: "Whether to send database backup notifications via SMTP.",
						},
						"smtp_notifications_deployments": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send deployment notifications via SMTP.",
							MarkdownDescription: "Whether to send deployment notifications via SMTP.",
						},
						"smtp_notifications_scheduled_tasks": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send scheduled task notifications via SMTP.",
							MarkdownDescription: "Whether to send scheduled task notifications via SMTP.",
						},
						"smtp_notifications_server_disk_usage": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send server disk usage notifications via SMTP.",
							MarkdownDescription: "Whether to send server disk usage notifications via SMTP.",
						},
						"smtp_notifications_status_changes": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send status change notifications via SMTP.",
							MarkdownDescription: "Whether to send status change notifications via SMTP.",
						},
						"smtp_notifications_test": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send test notifications via SMTP.",
							MarkdownDescription: "Whether to send test notifications via SMTP.",
						},
						"smtp_password": schema.StringAttribute{
							Computed:            true,
							Description:         "The SMTP password.",
							MarkdownDescription: "The SMTP password.",
						},
						"smtp_port": schema.StringAttribute{
							Computed:            true,
							Description:         "The SMTP port.",
							MarkdownDescription: "The SMTP port.",
						},
						"smtp_recipients": schema.StringAttribute{
							Computed:            true,
							Description:         "The email addresses to send emails to.",
							MarkdownDescription: "The email addresses to send emails to.",
						},
						"smtp_timeout": schema.StringAttribute{
							Computed:            true,
							Description:         "The SMTP timeout.",
							MarkdownDescription: "The SMTP timeout.",
						},
						"smtp_username": schema.StringAttribute{
							Computed:            true,
							Description:         "The SMTP username.",
							MarkdownDescription: "The SMTP username.",
						},
						"telegram_chat_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The Telegram chat ID.",
							MarkdownDescription: "The Telegram chat ID.",
						},
						"telegram_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether Telegram is enabled or not.",
							MarkdownDescription: "Whether Telegram is enabled or not.",
						},
						"telegram_notifications_database_backups": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send database backup notifications via Telegram.",
							MarkdownDescription: "Whether to send database backup notifications via Telegram.",
						},
						"telegram_notifications_database_backups_message_thread_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The Telegram database backup message thread ID.",
							MarkdownDescription: "The Telegram database backup message thread ID.",
						},
						"telegram_notifications_deployments": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send deployment notifications via Telegram.",
							MarkdownDescription: "Whether to send deployment notifications via Telegram.",
						},
						"telegram_notifications_deployments_message_thread_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The Telegram deployment message thread ID.",
							MarkdownDescription: "The Telegram deployment message thread ID.",
						},
						"telegram_notifications_scheduled_tasks": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send scheduled task notifications via Telegram.",
							MarkdownDescription: "Whether to send scheduled task notifications via Telegram.",
						},
						"telegram_notifications_scheduled_tasks_thread_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The Telegram scheduled task message thread ID.",
							MarkdownDescription: "The Telegram scheduled task message thread ID.",
						},
						"telegram_notifications_status_changes": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send status change notifications via Telegram.",
							MarkdownDescription: "Whether to send status change notifications via Telegram.",
						},
						"telegram_notifications_status_changes_message_thread_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The Telegram status change message thread ID.",
							MarkdownDescription: "The Telegram status change message thread ID.",
						},
						"telegram_notifications_test": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to send test notifications via Telegram.",
							MarkdownDescription: "Whether to send test notifications via Telegram.",
						},
						"telegram_notifications_test_message_thread_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The Telegram test message thread ID.",
							MarkdownDescription: "The Telegram test message thread ID.",
						},
						"telegram_token": schema.StringAttribute{
							Computed:            true,
							Description:         "The Telegram token.",
							MarkdownDescription: "The Telegram token.",
						},
						"updated_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time the team was last updated.",
							MarkdownDescription: "The date and time the team was last updated.",
						},
						"use_instance_email_settings": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to use instance email settings or not.",
							MarkdownDescription: "Whether to use instance email settings or not.",
						},
					},
					CustomType: TeamsType{
						ObjectType: types.ObjectType{
							AttrTypes: TeamsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type TeamsModel struct {
	Teams types.Set `tfsdk:"teams"`
}

var _ basetypes.ObjectTypable = TeamsType{}

type TeamsType struct {
	basetypes.ObjectType
}

func (t TeamsType) Equal(o attr.Type) bool {
	other, ok := o.(TeamsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TeamsType) String() string {
	return "TeamsType"
}

func (t TeamsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	customServerLimitAttribute, ok := attributes["custom_server_limit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_server_limit is missing from object`)

		return nil, diags
	}

	customServerLimitVal, ok := customServerLimitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_server_limit expected to be basetypes.StringValue, was: %T`, customServerLimitAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	discordEnabledAttribute, ok := attributes["discord_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_enabled is missing from object`)

		return nil, diags
	}

	discordEnabledVal, ok := discordEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_enabled expected to be basetypes.BoolValue, was: %T`, discordEnabledAttribute))
	}

	discordNotificationsDatabaseBackupsAttribute, ok := attributes["discord_notifications_database_backups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_database_backups is missing from object`)

		return nil, diags
	}

	discordNotificationsDatabaseBackupsVal, ok := discordNotificationsDatabaseBackupsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_database_backups expected to be basetypes.BoolValue, was: %T`, discordNotificationsDatabaseBackupsAttribute))
	}

	discordNotificationsDeploymentsAttribute, ok := attributes["discord_notifications_deployments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_deployments is missing from object`)

		return nil, diags
	}

	discordNotificationsDeploymentsVal, ok := discordNotificationsDeploymentsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_deployments expected to be basetypes.BoolValue, was: %T`, discordNotificationsDeploymentsAttribute))
	}

	discordNotificationsScheduledTasksAttribute, ok := attributes["discord_notifications_scheduled_tasks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_scheduled_tasks is missing from object`)

		return nil, diags
	}

	discordNotificationsScheduledTasksVal, ok := discordNotificationsScheduledTasksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_scheduled_tasks expected to be basetypes.BoolValue, was: %T`, discordNotificationsScheduledTasksAttribute))
	}

	discordNotificationsServerDiskUsageAttribute, ok := attributes["discord_notifications_server_disk_usage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_server_disk_usage is missing from object`)

		return nil, diags
	}

	discordNotificationsServerDiskUsageVal, ok := discordNotificationsServerDiskUsageAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_server_disk_usage expected to be basetypes.BoolValue, was: %T`, discordNotificationsServerDiskUsageAttribute))
	}

	discordNotificationsStatusChangesAttribute, ok := attributes["discord_notifications_status_changes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_status_changes is missing from object`)

		return nil, diags
	}

	discordNotificationsStatusChangesVal, ok := discordNotificationsStatusChangesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_status_changes expected to be basetypes.BoolValue, was: %T`, discordNotificationsStatusChangesAttribute))
	}

	discordNotificationsTestAttribute, ok := attributes["discord_notifications_test"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_test is missing from object`)

		return nil, diags
	}

	discordNotificationsTestVal, ok := discordNotificationsTestAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_test expected to be basetypes.BoolValue, was: %T`, discordNotificationsTestAttribute))
	}

	discordWebhookUrlAttribute, ok := attributes["discord_webhook_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_webhook_url is missing from object`)

		return nil, diags
	}

	discordWebhookUrlVal, ok := discordWebhookUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_webhook_url expected to be basetypes.StringValue, was: %T`, discordWebhookUrlAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	membersAttribute, ok := attributes["members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`members is missing from object`)

		return nil, diags
	}

	membersVal, ok := membersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`members expected to be basetypes.ListValue, was: %T`, membersAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	personalTeamAttribute, ok := attributes["personal_team"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`personal_team is missing from object`)

		return nil, diags
	}

	personalTeamVal, ok := personalTeamAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`personal_team expected to be basetypes.BoolValue, was: %T`, personalTeamAttribute))
	}

	resendApiKeyAttribute, ok := attributes["resend_api_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resend_api_key is missing from object`)

		return nil, diags
	}

	resendApiKeyVal, ok := resendApiKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resend_api_key expected to be basetypes.StringValue, was: %T`, resendApiKeyAttribute))
	}

	resendEnabledAttribute, ok := attributes["resend_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resend_enabled is missing from object`)

		return nil, diags
	}

	resendEnabledVal, ok := resendEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resend_enabled expected to be basetypes.BoolValue, was: %T`, resendEnabledAttribute))
	}

	showBoardingAttribute, ok := attributes["show_boarding"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`show_boarding is missing from object`)

		return nil, diags
	}

	showBoardingVal, ok := showBoardingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`show_boarding expected to be basetypes.BoolValue, was: %T`, showBoardingAttribute))
	}

	smtpEnabledAttribute, ok := attributes["smtp_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_enabled is missing from object`)

		return nil, diags
	}

	smtpEnabledVal, ok := smtpEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_enabled expected to be basetypes.BoolValue, was: %T`, smtpEnabledAttribute))
	}

	smtpEncryptionAttribute, ok := attributes["smtp_encryption"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_encryption is missing from object`)

		return nil, diags
	}

	smtpEncryptionVal, ok := smtpEncryptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_encryption expected to be basetypes.StringValue, was: %T`, smtpEncryptionAttribute))
	}

	smtpFromAddressAttribute, ok := attributes["smtp_from_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_from_address is missing from object`)

		return nil, diags
	}

	smtpFromAddressVal, ok := smtpFromAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_from_address expected to be basetypes.StringValue, was: %T`, smtpFromAddressAttribute))
	}

	smtpFromNameAttribute, ok := attributes["smtp_from_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_from_name is missing from object`)

		return nil, diags
	}

	smtpFromNameVal, ok := smtpFromNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_from_name expected to be basetypes.StringValue, was: %T`, smtpFromNameAttribute))
	}

	smtpHostAttribute, ok := attributes["smtp_host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_host is missing from object`)

		return nil, diags
	}

	smtpHostVal, ok := smtpHostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_host expected to be basetypes.StringValue, was: %T`, smtpHostAttribute))
	}

	smtpNotificationsDatabaseBackupsAttribute, ok := attributes["smtp_notifications_database_backups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_database_backups is missing from object`)

		return nil, diags
	}

	smtpNotificationsDatabaseBackupsVal, ok := smtpNotificationsDatabaseBackupsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_database_backups expected to be basetypes.BoolValue, was: %T`, smtpNotificationsDatabaseBackupsAttribute))
	}

	smtpNotificationsDeploymentsAttribute, ok := attributes["smtp_notifications_deployments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_deployments is missing from object`)

		return nil, diags
	}

	smtpNotificationsDeploymentsVal, ok := smtpNotificationsDeploymentsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_deployments expected to be basetypes.BoolValue, was: %T`, smtpNotificationsDeploymentsAttribute))
	}

	smtpNotificationsScheduledTasksAttribute, ok := attributes["smtp_notifications_scheduled_tasks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_scheduled_tasks is missing from object`)

		return nil, diags
	}

	smtpNotificationsScheduledTasksVal, ok := smtpNotificationsScheduledTasksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_scheduled_tasks expected to be basetypes.BoolValue, was: %T`, smtpNotificationsScheduledTasksAttribute))
	}

	smtpNotificationsServerDiskUsageAttribute, ok := attributes["smtp_notifications_server_disk_usage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_server_disk_usage is missing from object`)

		return nil, diags
	}

	smtpNotificationsServerDiskUsageVal, ok := smtpNotificationsServerDiskUsageAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_server_disk_usage expected to be basetypes.BoolValue, was: %T`, smtpNotificationsServerDiskUsageAttribute))
	}

	smtpNotificationsStatusChangesAttribute, ok := attributes["smtp_notifications_status_changes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_status_changes is missing from object`)

		return nil, diags
	}

	smtpNotificationsStatusChangesVal, ok := smtpNotificationsStatusChangesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_status_changes expected to be basetypes.BoolValue, was: %T`, smtpNotificationsStatusChangesAttribute))
	}

	smtpNotificationsTestAttribute, ok := attributes["smtp_notifications_test"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_test is missing from object`)

		return nil, diags
	}

	smtpNotificationsTestVal, ok := smtpNotificationsTestAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_test expected to be basetypes.BoolValue, was: %T`, smtpNotificationsTestAttribute))
	}

	smtpPasswordAttribute, ok := attributes["smtp_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_password is missing from object`)

		return nil, diags
	}

	smtpPasswordVal, ok := smtpPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_password expected to be basetypes.StringValue, was: %T`, smtpPasswordAttribute))
	}

	smtpPortAttribute, ok := attributes["smtp_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_port is missing from object`)

		return nil, diags
	}

	smtpPortVal, ok := smtpPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_port expected to be basetypes.StringValue, was: %T`, smtpPortAttribute))
	}

	smtpRecipientsAttribute, ok := attributes["smtp_recipients"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_recipients is missing from object`)

		return nil, diags
	}

	smtpRecipientsVal, ok := smtpRecipientsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_recipients expected to be basetypes.StringValue, was: %T`, smtpRecipientsAttribute))
	}

	smtpTimeoutAttribute, ok := attributes["smtp_timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_timeout is missing from object`)

		return nil, diags
	}

	smtpTimeoutVal, ok := smtpTimeoutAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_timeout expected to be basetypes.StringValue, was: %T`, smtpTimeoutAttribute))
	}

	smtpUsernameAttribute, ok := attributes["smtp_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_username is missing from object`)

		return nil, diags
	}

	smtpUsernameVal, ok := smtpUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_username expected to be basetypes.StringValue, was: %T`, smtpUsernameAttribute))
	}

	telegramChatIdAttribute, ok := attributes["telegram_chat_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_chat_id is missing from object`)

		return nil, diags
	}

	telegramChatIdVal, ok := telegramChatIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_chat_id expected to be basetypes.StringValue, was: %T`, telegramChatIdAttribute))
	}

	telegramEnabledAttribute, ok := attributes["telegram_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_enabled is missing from object`)

		return nil, diags
	}

	telegramEnabledVal, ok := telegramEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_enabled expected to be basetypes.BoolValue, was: %T`, telegramEnabledAttribute))
	}

	telegramNotificationsDatabaseBackupsAttribute, ok := attributes["telegram_notifications_database_backups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_database_backups is missing from object`)

		return nil, diags
	}

	telegramNotificationsDatabaseBackupsVal, ok := telegramNotificationsDatabaseBackupsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_database_backups expected to be basetypes.BoolValue, was: %T`, telegramNotificationsDatabaseBackupsAttribute))
	}

	telegramNotificationsDatabaseBackupsMessageThreadIdAttribute, ok := attributes["telegram_notifications_database_backups_message_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_database_backups_message_thread_id is missing from object`)

		return nil, diags
	}

	telegramNotificationsDatabaseBackupsMessageThreadIdVal, ok := telegramNotificationsDatabaseBackupsMessageThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_database_backups_message_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsDatabaseBackupsMessageThreadIdAttribute))
	}

	telegramNotificationsDeploymentsAttribute, ok := attributes["telegram_notifications_deployments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_deployments is missing from object`)

		return nil, diags
	}

	telegramNotificationsDeploymentsVal, ok := telegramNotificationsDeploymentsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_deployments expected to be basetypes.BoolValue, was: %T`, telegramNotificationsDeploymentsAttribute))
	}

	telegramNotificationsDeploymentsMessageThreadIdAttribute, ok := attributes["telegram_notifications_deployments_message_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_deployments_message_thread_id is missing from object`)

		return nil, diags
	}

	telegramNotificationsDeploymentsMessageThreadIdVal, ok := telegramNotificationsDeploymentsMessageThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_deployments_message_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsDeploymentsMessageThreadIdAttribute))
	}

	telegramNotificationsScheduledTasksAttribute, ok := attributes["telegram_notifications_scheduled_tasks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_scheduled_tasks is missing from object`)

		return nil, diags
	}

	telegramNotificationsScheduledTasksVal, ok := telegramNotificationsScheduledTasksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_scheduled_tasks expected to be basetypes.BoolValue, was: %T`, telegramNotificationsScheduledTasksAttribute))
	}

	telegramNotificationsScheduledTasksThreadIdAttribute, ok := attributes["telegram_notifications_scheduled_tasks_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_scheduled_tasks_thread_id is missing from object`)

		return nil, diags
	}

	telegramNotificationsScheduledTasksThreadIdVal, ok := telegramNotificationsScheduledTasksThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_scheduled_tasks_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsScheduledTasksThreadIdAttribute))
	}

	telegramNotificationsStatusChangesAttribute, ok := attributes["telegram_notifications_status_changes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_status_changes is missing from object`)

		return nil, diags
	}

	telegramNotificationsStatusChangesVal, ok := telegramNotificationsStatusChangesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_status_changes expected to be basetypes.BoolValue, was: %T`, telegramNotificationsStatusChangesAttribute))
	}

	telegramNotificationsStatusChangesMessageThreadIdAttribute, ok := attributes["telegram_notifications_status_changes_message_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_status_changes_message_thread_id is missing from object`)

		return nil, diags
	}

	telegramNotificationsStatusChangesMessageThreadIdVal, ok := telegramNotificationsStatusChangesMessageThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_status_changes_message_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsStatusChangesMessageThreadIdAttribute))
	}

	telegramNotificationsTestAttribute, ok := attributes["telegram_notifications_test"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_test is missing from object`)

		return nil, diags
	}

	telegramNotificationsTestVal, ok := telegramNotificationsTestAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_test expected to be basetypes.BoolValue, was: %T`, telegramNotificationsTestAttribute))
	}

	telegramNotificationsTestMessageThreadIdAttribute, ok := attributes["telegram_notifications_test_message_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_test_message_thread_id is missing from object`)

		return nil, diags
	}

	telegramNotificationsTestMessageThreadIdVal, ok := telegramNotificationsTestMessageThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_test_message_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsTestMessageThreadIdAttribute))
	}

	telegramTokenAttribute, ok := attributes["telegram_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_token is missing from object`)

		return nil, diags
	}

	telegramTokenVal, ok := telegramTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_token expected to be basetypes.StringValue, was: %T`, telegramTokenAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	useInstanceEmailSettingsAttribute, ok := attributes["use_instance_email_settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`use_instance_email_settings is missing from object`)

		return nil, diags
	}

	useInstanceEmailSettingsVal, ok := useInstanceEmailSettingsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`use_instance_email_settings expected to be basetypes.BoolValue, was: %T`, useInstanceEmailSettingsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TeamsValue{
		CreatedAt:                            createdAtVal,
		CustomServerLimit:                    customServerLimitVal,
		Description:                          descriptionVal,
		DiscordEnabled:                       discordEnabledVal,
		DiscordNotificationsDatabaseBackups:  discordNotificationsDatabaseBackupsVal,
		DiscordNotificationsDeployments:      discordNotificationsDeploymentsVal,
		DiscordNotificationsScheduledTasks:   discordNotificationsScheduledTasksVal,
		DiscordNotificationsServerDiskUsage:  discordNotificationsServerDiskUsageVal,
		DiscordNotificationsStatusChanges:    discordNotificationsStatusChangesVal,
		DiscordNotificationsTest:             discordNotificationsTestVal,
		DiscordWebhookUrl:                    discordWebhookUrlVal,
		Id:                                   idVal,
		Members:                              membersVal,
		Name:                                 nameVal,
		PersonalTeam:                         personalTeamVal,
		ResendApiKey:                         resendApiKeyVal,
		ResendEnabled:                        resendEnabledVal,
		ShowBoarding:                         showBoardingVal,
		SmtpEnabled:                          smtpEnabledVal,
		SmtpEncryption:                       smtpEncryptionVal,
		SmtpFromAddress:                      smtpFromAddressVal,
		SmtpFromName:                         smtpFromNameVal,
		SmtpHost:                             smtpHostVal,
		SmtpNotificationsDatabaseBackups:     smtpNotificationsDatabaseBackupsVal,
		SmtpNotificationsDeployments:         smtpNotificationsDeploymentsVal,
		SmtpNotificationsScheduledTasks:      smtpNotificationsScheduledTasksVal,
		SmtpNotificationsServerDiskUsage:     smtpNotificationsServerDiskUsageVal,
		SmtpNotificationsStatusChanges:       smtpNotificationsStatusChangesVal,
		SmtpNotificationsTest:                smtpNotificationsTestVal,
		SmtpPassword:                         smtpPasswordVal,
		SmtpPort:                             smtpPortVal,
		SmtpRecipients:                       smtpRecipientsVal,
		SmtpTimeout:                          smtpTimeoutVal,
		SmtpUsername:                         smtpUsernameVal,
		TelegramChatId:                       telegramChatIdVal,
		TelegramEnabled:                      telegramEnabledVal,
		TelegramNotificationsDatabaseBackups: telegramNotificationsDatabaseBackupsVal,
		TelegramNotificationsDatabaseBackupsMessageThreadId: telegramNotificationsDatabaseBackupsMessageThreadIdVal,
		TelegramNotificationsDeployments:                    telegramNotificationsDeploymentsVal,
		TelegramNotificationsDeploymentsMessageThreadId:     telegramNotificationsDeploymentsMessageThreadIdVal,
		TelegramNotificationsScheduledTasks:                 telegramNotificationsScheduledTasksVal,
		TelegramNotificationsScheduledTasksThreadId:         telegramNotificationsScheduledTasksThreadIdVal,
		TelegramNotificationsStatusChanges:                  telegramNotificationsStatusChangesVal,
		TelegramNotificationsStatusChangesMessageThreadId:   telegramNotificationsStatusChangesMessageThreadIdVal,
		TelegramNotificationsTest:                           telegramNotificationsTestVal,
		TelegramNotificationsTestMessageThreadId:            telegramNotificationsTestMessageThreadIdVal,
		TelegramToken:                                       telegramTokenVal,
		UpdatedAt:                                           updatedAtVal,
		UseInstanceEmailSettings:                            useInstanceEmailSettingsVal,
		state:                                               attr.ValueStateKnown,
	}, diags
}

func NewTeamsValueNull() TeamsValue {
	return TeamsValue{
		state: attr.ValueStateNull,
	}
}

func NewTeamsValueUnknown() TeamsValue {
	return TeamsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTeamsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TeamsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TeamsValue Attribute Value",
				"While creating a TeamsValue value, a missing attribute value was detected. "+
					"A TeamsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TeamsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TeamsValue Attribute Type",
				"While creating a TeamsValue value, an invalid attribute value was detected. "+
					"A TeamsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TeamsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TeamsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TeamsValue Attribute Value",
				"While creating a TeamsValue value, an extra attribute value was detected. "+
					"A TeamsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TeamsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTeamsValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	customServerLimitAttribute, ok := attributes["custom_server_limit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_server_limit is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	customServerLimitVal, ok := customServerLimitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_server_limit expected to be basetypes.StringValue, was: %T`, customServerLimitAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	discordEnabledAttribute, ok := attributes["discord_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_enabled is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	discordEnabledVal, ok := discordEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_enabled expected to be basetypes.BoolValue, was: %T`, discordEnabledAttribute))
	}

	discordNotificationsDatabaseBackupsAttribute, ok := attributes["discord_notifications_database_backups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_database_backups is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	discordNotificationsDatabaseBackupsVal, ok := discordNotificationsDatabaseBackupsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_database_backups expected to be basetypes.BoolValue, was: %T`, discordNotificationsDatabaseBackupsAttribute))
	}

	discordNotificationsDeploymentsAttribute, ok := attributes["discord_notifications_deployments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_deployments is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	discordNotificationsDeploymentsVal, ok := discordNotificationsDeploymentsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_deployments expected to be basetypes.BoolValue, was: %T`, discordNotificationsDeploymentsAttribute))
	}

	discordNotificationsScheduledTasksAttribute, ok := attributes["discord_notifications_scheduled_tasks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_scheduled_tasks is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	discordNotificationsScheduledTasksVal, ok := discordNotificationsScheduledTasksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_scheduled_tasks expected to be basetypes.BoolValue, was: %T`, discordNotificationsScheduledTasksAttribute))
	}

	discordNotificationsServerDiskUsageAttribute, ok := attributes["discord_notifications_server_disk_usage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_server_disk_usage is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	discordNotificationsServerDiskUsageVal, ok := discordNotificationsServerDiskUsageAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_server_disk_usage expected to be basetypes.BoolValue, was: %T`, discordNotificationsServerDiskUsageAttribute))
	}

	discordNotificationsStatusChangesAttribute, ok := attributes["discord_notifications_status_changes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_status_changes is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	discordNotificationsStatusChangesVal, ok := discordNotificationsStatusChangesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_status_changes expected to be basetypes.BoolValue, was: %T`, discordNotificationsStatusChangesAttribute))
	}

	discordNotificationsTestAttribute, ok := attributes["discord_notifications_test"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_notifications_test is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	discordNotificationsTestVal, ok := discordNotificationsTestAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_notifications_test expected to be basetypes.BoolValue, was: %T`, discordNotificationsTestAttribute))
	}

	discordWebhookUrlAttribute, ok := attributes["discord_webhook_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discord_webhook_url is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	discordWebhookUrlVal, ok := discordWebhookUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discord_webhook_url expected to be basetypes.StringValue, was: %T`, discordWebhookUrlAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	membersAttribute, ok := attributes["members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`members is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	membersVal, ok := membersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`members expected to be basetypes.ListValue, was: %T`, membersAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	personalTeamAttribute, ok := attributes["personal_team"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`personal_team is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	personalTeamVal, ok := personalTeamAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`personal_team expected to be basetypes.BoolValue, was: %T`, personalTeamAttribute))
	}

	resendApiKeyAttribute, ok := attributes["resend_api_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resend_api_key is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	resendApiKeyVal, ok := resendApiKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resend_api_key expected to be basetypes.StringValue, was: %T`, resendApiKeyAttribute))
	}

	resendEnabledAttribute, ok := attributes["resend_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resend_enabled is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	resendEnabledVal, ok := resendEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resend_enabled expected to be basetypes.BoolValue, was: %T`, resendEnabledAttribute))
	}

	showBoardingAttribute, ok := attributes["show_boarding"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`show_boarding is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	showBoardingVal, ok := showBoardingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`show_boarding expected to be basetypes.BoolValue, was: %T`, showBoardingAttribute))
	}

	smtpEnabledAttribute, ok := attributes["smtp_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_enabled is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpEnabledVal, ok := smtpEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_enabled expected to be basetypes.BoolValue, was: %T`, smtpEnabledAttribute))
	}

	smtpEncryptionAttribute, ok := attributes["smtp_encryption"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_encryption is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpEncryptionVal, ok := smtpEncryptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_encryption expected to be basetypes.StringValue, was: %T`, smtpEncryptionAttribute))
	}

	smtpFromAddressAttribute, ok := attributes["smtp_from_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_from_address is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpFromAddressVal, ok := smtpFromAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_from_address expected to be basetypes.StringValue, was: %T`, smtpFromAddressAttribute))
	}

	smtpFromNameAttribute, ok := attributes["smtp_from_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_from_name is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpFromNameVal, ok := smtpFromNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_from_name expected to be basetypes.StringValue, was: %T`, smtpFromNameAttribute))
	}

	smtpHostAttribute, ok := attributes["smtp_host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_host is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpHostVal, ok := smtpHostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_host expected to be basetypes.StringValue, was: %T`, smtpHostAttribute))
	}

	smtpNotificationsDatabaseBackupsAttribute, ok := attributes["smtp_notifications_database_backups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_database_backups is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpNotificationsDatabaseBackupsVal, ok := smtpNotificationsDatabaseBackupsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_database_backups expected to be basetypes.BoolValue, was: %T`, smtpNotificationsDatabaseBackupsAttribute))
	}

	smtpNotificationsDeploymentsAttribute, ok := attributes["smtp_notifications_deployments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_deployments is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpNotificationsDeploymentsVal, ok := smtpNotificationsDeploymentsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_deployments expected to be basetypes.BoolValue, was: %T`, smtpNotificationsDeploymentsAttribute))
	}

	smtpNotificationsScheduledTasksAttribute, ok := attributes["smtp_notifications_scheduled_tasks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_scheduled_tasks is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpNotificationsScheduledTasksVal, ok := smtpNotificationsScheduledTasksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_scheduled_tasks expected to be basetypes.BoolValue, was: %T`, smtpNotificationsScheduledTasksAttribute))
	}

	smtpNotificationsServerDiskUsageAttribute, ok := attributes["smtp_notifications_server_disk_usage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_server_disk_usage is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpNotificationsServerDiskUsageVal, ok := smtpNotificationsServerDiskUsageAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_server_disk_usage expected to be basetypes.BoolValue, was: %T`, smtpNotificationsServerDiskUsageAttribute))
	}

	smtpNotificationsStatusChangesAttribute, ok := attributes["smtp_notifications_status_changes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_status_changes is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpNotificationsStatusChangesVal, ok := smtpNotificationsStatusChangesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_status_changes expected to be basetypes.BoolValue, was: %T`, smtpNotificationsStatusChangesAttribute))
	}

	smtpNotificationsTestAttribute, ok := attributes["smtp_notifications_test"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_notifications_test is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpNotificationsTestVal, ok := smtpNotificationsTestAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_notifications_test expected to be basetypes.BoolValue, was: %T`, smtpNotificationsTestAttribute))
	}

	smtpPasswordAttribute, ok := attributes["smtp_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_password is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpPasswordVal, ok := smtpPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_password expected to be basetypes.StringValue, was: %T`, smtpPasswordAttribute))
	}

	smtpPortAttribute, ok := attributes["smtp_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_port is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpPortVal, ok := smtpPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_port expected to be basetypes.StringValue, was: %T`, smtpPortAttribute))
	}

	smtpRecipientsAttribute, ok := attributes["smtp_recipients"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_recipients is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpRecipientsVal, ok := smtpRecipientsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_recipients expected to be basetypes.StringValue, was: %T`, smtpRecipientsAttribute))
	}

	smtpTimeoutAttribute, ok := attributes["smtp_timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_timeout is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpTimeoutVal, ok := smtpTimeoutAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_timeout expected to be basetypes.StringValue, was: %T`, smtpTimeoutAttribute))
	}

	smtpUsernameAttribute, ok := attributes["smtp_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_username is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	smtpUsernameVal, ok := smtpUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_username expected to be basetypes.StringValue, was: %T`, smtpUsernameAttribute))
	}

	telegramChatIdAttribute, ok := attributes["telegram_chat_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_chat_id is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramChatIdVal, ok := telegramChatIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_chat_id expected to be basetypes.StringValue, was: %T`, telegramChatIdAttribute))
	}

	telegramEnabledAttribute, ok := attributes["telegram_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_enabled is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramEnabledVal, ok := telegramEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_enabled expected to be basetypes.BoolValue, was: %T`, telegramEnabledAttribute))
	}

	telegramNotificationsDatabaseBackupsAttribute, ok := attributes["telegram_notifications_database_backups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_database_backups is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsDatabaseBackupsVal, ok := telegramNotificationsDatabaseBackupsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_database_backups expected to be basetypes.BoolValue, was: %T`, telegramNotificationsDatabaseBackupsAttribute))
	}

	telegramNotificationsDatabaseBackupsMessageThreadIdAttribute, ok := attributes["telegram_notifications_database_backups_message_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_database_backups_message_thread_id is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsDatabaseBackupsMessageThreadIdVal, ok := telegramNotificationsDatabaseBackupsMessageThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_database_backups_message_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsDatabaseBackupsMessageThreadIdAttribute))
	}

	telegramNotificationsDeploymentsAttribute, ok := attributes["telegram_notifications_deployments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_deployments is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsDeploymentsVal, ok := telegramNotificationsDeploymentsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_deployments expected to be basetypes.BoolValue, was: %T`, telegramNotificationsDeploymentsAttribute))
	}

	telegramNotificationsDeploymentsMessageThreadIdAttribute, ok := attributes["telegram_notifications_deployments_message_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_deployments_message_thread_id is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsDeploymentsMessageThreadIdVal, ok := telegramNotificationsDeploymentsMessageThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_deployments_message_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsDeploymentsMessageThreadIdAttribute))
	}

	telegramNotificationsScheduledTasksAttribute, ok := attributes["telegram_notifications_scheduled_tasks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_scheduled_tasks is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsScheduledTasksVal, ok := telegramNotificationsScheduledTasksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_scheduled_tasks expected to be basetypes.BoolValue, was: %T`, telegramNotificationsScheduledTasksAttribute))
	}

	telegramNotificationsScheduledTasksThreadIdAttribute, ok := attributes["telegram_notifications_scheduled_tasks_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_scheduled_tasks_thread_id is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsScheduledTasksThreadIdVal, ok := telegramNotificationsScheduledTasksThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_scheduled_tasks_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsScheduledTasksThreadIdAttribute))
	}

	telegramNotificationsStatusChangesAttribute, ok := attributes["telegram_notifications_status_changes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_status_changes is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsStatusChangesVal, ok := telegramNotificationsStatusChangesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_status_changes expected to be basetypes.BoolValue, was: %T`, telegramNotificationsStatusChangesAttribute))
	}

	telegramNotificationsStatusChangesMessageThreadIdAttribute, ok := attributes["telegram_notifications_status_changes_message_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_status_changes_message_thread_id is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsStatusChangesMessageThreadIdVal, ok := telegramNotificationsStatusChangesMessageThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_status_changes_message_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsStatusChangesMessageThreadIdAttribute))
	}

	telegramNotificationsTestAttribute, ok := attributes["telegram_notifications_test"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_test is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsTestVal, ok := telegramNotificationsTestAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_test expected to be basetypes.BoolValue, was: %T`, telegramNotificationsTestAttribute))
	}

	telegramNotificationsTestMessageThreadIdAttribute, ok := attributes["telegram_notifications_test_message_thread_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_notifications_test_message_thread_id is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramNotificationsTestMessageThreadIdVal, ok := telegramNotificationsTestMessageThreadIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_notifications_test_message_thread_id expected to be basetypes.StringValue, was: %T`, telegramNotificationsTestMessageThreadIdAttribute))
	}

	telegramTokenAttribute, ok := attributes["telegram_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`telegram_token is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	telegramTokenVal, ok := telegramTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`telegram_token expected to be basetypes.StringValue, was: %T`, telegramTokenAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	useInstanceEmailSettingsAttribute, ok := attributes["use_instance_email_settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`use_instance_email_settings is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	useInstanceEmailSettingsVal, ok := useInstanceEmailSettingsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`use_instance_email_settings expected to be basetypes.BoolValue, was: %T`, useInstanceEmailSettingsAttribute))
	}

	if diags.HasError() {
		return NewTeamsValueUnknown(), diags
	}

	return TeamsValue{
		CreatedAt:                            createdAtVal,
		CustomServerLimit:                    customServerLimitVal,
		Description:                          descriptionVal,
		DiscordEnabled:                       discordEnabledVal,
		DiscordNotificationsDatabaseBackups:  discordNotificationsDatabaseBackupsVal,
		DiscordNotificationsDeployments:      discordNotificationsDeploymentsVal,
		DiscordNotificationsScheduledTasks:   discordNotificationsScheduledTasksVal,
		DiscordNotificationsServerDiskUsage:  discordNotificationsServerDiskUsageVal,
		DiscordNotificationsStatusChanges:    discordNotificationsStatusChangesVal,
		DiscordNotificationsTest:             discordNotificationsTestVal,
		DiscordWebhookUrl:                    discordWebhookUrlVal,
		Id:                                   idVal,
		Members:                              membersVal,
		Name:                                 nameVal,
		PersonalTeam:                         personalTeamVal,
		ResendApiKey:                         resendApiKeyVal,
		ResendEnabled:                        resendEnabledVal,
		ShowBoarding:                         showBoardingVal,
		SmtpEnabled:                          smtpEnabledVal,
		SmtpEncryption:                       smtpEncryptionVal,
		SmtpFromAddress:                      smtpFromAddressVal,
		SmtpFromName:                         smtpFromNameVal,
		SmtpHost:                             smtpHostVal,
		SmtpNotificationsDatabaseBackups:     smtpNotificationsDatabaseBackupsVal,
		SmtpNotificationsDeployments:         smtpNotificationsDeploymentsVal,
		SmtpNotificationsScheduledTasks:      smtpNotificationsScheduledTasksVal,
		SmtpNotificationsServerDiskUsage:     smtpNotificationsServerDiskUsageVal,
		SmtpNotificationsStatusChanges:       smtpNotificationsStatusChangesVal,
		SmtpNotificationsTest:                smtpNotificationsTestVal,
		SmtpPassword:                         smtpPasswordVal,
		SmtpPort:                             smtpPortVal,
		SmtpRecipients:                       smtpRecipientsVal,
		SmtpTimeout:                          smtpTimeoutVal,
		SmtpUsername:                         smtpUsernameVal,
		TelegramChatId:                       telegramChatIdVal,
		TelegramEnabled:                      telegramEnabledVal,
		TelegramNotificationsDatabaseBackups: telegramNotificationsDatabaseBackupsVal,
		TelegramNotificationsDatabaseBackupsMessageThreadId: telegramNotificationsDatabaseBackupsMessageThreadIdVal,
		TelegramNotificationsDeployments:                    telegramNotificationsDeploymentsVal,
		TelegramNotificationsDeploymentsMessageThreadId:     telegramNotificationsDeploymentsMessageThreadIdVal,
		TelegramNotificationsScheduledTasks:                 telegramNotificationsScheduledTasksVal,
		TelegramNotificationsScheduledTasksThreadId:         telegramNotificationsScheduledTasksThreadIdVal,
		TelegramNotificationsStatusChanges:                  telegramNotificationsStatusChangesVal,
		TelegramNotificationsStatusChangesMessageThreadId:   telegramNotificationsStatusChangesMessageThreadIdVal,
		TelegramNotificationsTest:                           telegramNotificationsTestVal,
		TelegramNotificationsTestMessageThreadId:            telegramNotificationsTestMessageThreadIdVal,
		TelegramToken:                                       telegramTokenVal,
		UpdatedAt:                                           updatedAtVal,
		UseInstanceEmailSettings:                            useInstanceEmailSettingsVal,
		state:                                               attr.ValueStateKnown,
	}, diags
}

func NewTeamsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TeamsValue {
	object, diags := NewTeamsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTeamsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TeamsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTeamsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTeamsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTeamsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTeamsValueMust(TeamsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TeamsType) ValueType(ctx context.Context) attr.Value {
	return TeamsValue{}
}

var _ basetypes.ObjectValuable = TeamsValue{}

type TeamsValue struct {
	CreatedAt                                           basetypes.StringValue `tfsdk:"created_at"`
	CustomServerLimit                                   basetypes.StringValue `tfsdk:"custom_server_limit"`
	Description                                         basetypes.StringValue `tfsdk:"description"`
	DiscordEnabled                                      basetypes.BoolValue   `tfsdk:"discord_enabled"`
	DiscordNotificationsDatabaseBackups                 basetypes.BoolValue   `tfsdk:"discord_notifications_database_backups"`
	DiscordNotificationsDeployments                     basetypes.BoolValue   `tfsdk:"discord_notifications_deployments"`
	DiscordNotificationsScheduledTasks                  basetypes.BoolValue   `tfsdk:"discord_notifications_scheduled_tasks"`
	DiscordNotificationsServerDiskUsage                 basetypes.BoolValue   `tfsdk:"discord_notifications_server_disk_usage"`
	DiscordNotificationsStatusChanges                   basetypes.BoolValue   `tfsdk:"discord_notifications_status_changes"`
	DiscordNotificationsTest                            basetypes.BoolValue   `tfsdk:"discord_notifications_test"`
	DiscordWebhookUrl                                   basetypes.StringValue `tfsdk:"discord_webhook_url"`
	Id                                                  basetypes.Int64Value  `tfsdk:"id"`
	Members                                             basetypes.ListValue   `tfsdk:"members"`
	Name                                                basetypes.StringValue `tfsdk:"name"`
	PersonalTeam                                        basetypes.BoolValue   `tfsdk:"personal_team"`
	ResendApiKey                                        basetypes.StringValue `tfsdk:"resend_api_key"`
	ResendEnabled                                       basetypes.BoolValue   `tfsdk:"resend_enabled"`
	ShowBoarding                                        basetypes.BoolValue   `tfsdk:"show_boarding"`
	SmtpEnabled                                         basetypes.BoolValue   `tfsdk:"smtp_enabled"`
	SmtpEncryption                                      basetypes.StringValue `tfsdk:"smtp_encryption"`
	SmtpFromAddress                                     basetypes.StringValue `tfsdk:"smtp_from_address"`
	SmtpFromName                                        basetypes.StringValue `tfsdk:"smtp_from_name"`
	SmtpHost                                            basetypes.StringValue `tfsdk:"smtp_host"`
	SmtpNotificationsDatabaseBackups                    basetypes.BoolValue   `tfsdk:"smtp_notifications_database_backups"`
	SmtpNotificationsDeployments                        basetypes.BoolValue   `tfsdk:"smtp_notifications_deployments"`
	SmtpNotificationsScheduledTasks                     basetypes.BoolValue   `tfsdk:"smtp_notifications_scheduled_tasks"`
	SmtpNotificationsServerDiskUsage                    basetypes.BoolValue   `tfsdk:"smtp_notifications_server_disk_usage"`
	SmtpNotificationsStatusChanges                      basetypes.BoolValue   `tfsdk:"smtp_notifications_status_changes"`
	SmtpNotificationsTest                               basetypes.BoolValue   `tfsdk:"smtp_notifications_test"`
	SmtpPassword                                        basetypes.StringValue `tfsdk:"smtp_password"`
	SmtpPort                                            basetypes.StringValue `tfsdk:"smtp_port"`
	SmtpRecipients                                      basetypes.StringValue `tfsdk:"smtp_recipients"`
	SmtpTimeout                                         basetypes.StringValue `tfsdk:"smtp_timeout"`
	SmtpUsername                                        basetypes.StringValue `tfsdk:"smtp_username"`
	TelegramChatId                                      basetypes.StringValue `tfsdk:"telegram_chat_id"`
	TelegramEnabled                                     basetypes.BoolValue   `tfsdk:"telegram_enabled"`
	TelegramNotificationsDatabaseBackups                basetypes.BoolValue   `tfsdk:"telegram_notifications_database_backups"`
	TelegramNotificationsDatabaseBackupsMessageThreadId basetypes.StringValue `tfsdk:"telegram_notifications_database_backups_message_thread_id"`
	TelegramNotificationsDeployments                    basetypes.BoolValue   `tfsdk:"telegram_notifications_deployments"`
	TelegramNotificationsDeploymentsMessageThreadId     basetypes.StringValue `tfsdk:"telegram_notifications_deployments_message_thread_id"`
	TelegramNotificationsScheduledTasks                 basetypes.BoolValue   `tfsdk:"telegram_notifications_scheduled_tasks"`
	TelegramNotificationsScheduledTasksThreadId         basetypes.StringValue `tfsdk:"telegram_notifications_scheduled_tasks_thread_id"`
	TelegramNotificationsStatusChanges                  basetypes.BoolValue   `tfsdk:"telegram_notifications_status_changes"`
	TelegramNotificationsStatusChangesMessageThreadId   basetypes.StringValue `tfsdk:"telegram_notifications_status_changes_message_thread_id"`
	TelegramNotificationsTest                           basetypes.BoolValue   `tfsdk:"telegram_notifications_test"`
	TelegramNotificationsTestMessageThreadId            basetypes.StringValue `tfsdk:"telegram_notifications_test_message_thread_id"`
	TelegramToken                                       basetypes.StringValue `tfsdk:"telegram_token"`
	UpdatedAt                                           basetypes.StringValue `tfsdk:"updated_at"`
	UseInstanceEmailSettings                            basetypes.BoolValue   `tfsdk:"use_instance_email_settings"`
	state                                               attr.ValueState
}

func (v TeamsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 49)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["custom_server_limit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["discord_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["discord_notifications_database_backups"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["discord_notifications_deployments"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["discord_notifications_scheduled_tasks"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["discord_notifications_server_disk_usage"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["discord_notifications_status_changes"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["discord_notifications_test"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["discord_webhook_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["members"] = basetypes.ListType{
		ElemType: MembersValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["personal_team"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["resend_api_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resend_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["show_boarding"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_encryption"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_from_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_from_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_host"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_notifications_database_backups"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_notifications_deployments"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_notifications_scheduled_tasks"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_notifications_server_disk_usage"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_notifications_status_changes"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_notifications_test"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_port"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_recipients"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_timeout"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_username"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["telegram_chat_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["telegram_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_database_backups"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_database_backups_message_thread_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_deployments"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_deployments_message_thread_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_scheduled_tasks"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_scheduled_tasks_thread_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_status_changes"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_status_changes_message_thread_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_test"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["telegram_notifications_test_message_thread_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["telegram_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["use_instance_email_settings"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 49)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.CustomServerLimit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_server_limit"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.DiscordEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discord_enabled"] = val

		val, err = v.DiscordNotificationsDatabaseBackups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discord_notifications_database_backups"] = val

		val, err = v.DiscordNotificationsDeployments.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discord_notifications_deployments"] = val

		val, err = v.DiscordNotificationsScheduledTasks.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discord_notifications_scheduled_tasks"] = val

		val, err = v.DiscordNotificationsServerDiskUsage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discord_notifications_server_disk_usage"] = val

		val, err = v.DiscordNotificationsStatusChanges.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discord_notifications_status_changes"] = val

		val, err = v.DiscordNotificationsTest.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discord_notifications_test"] = val

		val, err = v.DiscordWebhookUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discord_webhook_url"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Members.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["members"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PersonalTeam.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["personal_team"] = val

		val, err = v.ResendApiKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resend_api_key"] = val

		val, err = v.ResendEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resend_enabled"] = val

		val, err = v.ShowBoarding.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["show_boarding"] = val

		val, err = v.SmtpEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_enabled"] = val

		val, err = v.SmtpEncryption.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_encryption"] = val

		val, err = v.SmtpFromAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_from_address"] = val

		val, err = v.SmtpFromName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_from_name"] = val

		val, err = v.SmtpHost.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_host"] = val

		val, err = v.SmtpNotificationsDatabaseBackups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_notifications_database_backups"] = val

		val, err = v.SmtpNotificationsDeployments.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_notifications_deployments"] = val

		val, err = v.SmtpNotificationsScheduledTasks.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_notifications_scheduled_tasks"] = val

		val, err = v.SmtpNotificationsServerDiskUsage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_notifications_server_disk_usage"] = val

		val, err = v.SmtpNotificationsStatusChanges.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_notifications_status_changes"] = val

		val, err = v.SmtpNotificationsTest.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_notifications_test"] = val

		val, err = v.SmtpPassword.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_password"] = val

		val, err = v.SmtpPort.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_port"] = val

		val, err = v.SmtpRecipients.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_recipients"] = val

		val, err = v.SmtpTimeout.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_timeout"] = val

		val, err = v.SmtpUsername.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_username"] = val

		val, err = v.TelegramChatId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_chat_id"] = val

		val, err = v.TelegramEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_enabled"] = val

		val, err = v.TelegramNotificationsDatabaseBackups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_database_backups"] = val

		val, err = v.TelegramNotificationsDatabaseBackupsMessageThreadId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_database_backups_message_thread_id"] = val

		val, err = v.TelegramNotificationsDeployments.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_deployments"] = val

		val, err = v.TelegramNotificationsDeploymentsMessageThreadId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_deployments_message_thread_id"] = val

		val, err = v.TelegramNotificationsScheduledTasks.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_scheduled_tasks"] = val

		val, err = v.TelegramNotificationsScheduledTasksThreadId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_scheduled_tasks_thread_id"] = val

		val, err = v.TelegramNotificationsStatusChanges.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_status_changes"] = val

		val, err = v.TelegramNotificationsStatusChangesMessageThreadId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_status_changes_message_thread_id"] = val

		val, err = v.TelegramNotificationsTest.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_test"] = val

		val, err = v.TelegramNotificationsTestMessageThreadId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_notifications_test_message_thread_id"] = val

		val, err = v.TelegramToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["telegram_token"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		val, err = v.UseInstanceEmailSettings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["use_instance_email_settings"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TeamsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TeamsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TeamsValue) String() string {
	return "TeamsValue"
}

func (v TeamsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	members := types.ListValueMust(
		MembersType{
			basetypes.ObjectType{
				AttrTypes: MembersValue{}.AttributeTypes(ctx),
			},
		},
		v.Members.Elements(),
	)

	if v.Members.IsNull() {
		members = types.ListNull(
			MembersType{
				basetypes.ObjectType{
					AttrTypes: MembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Members.IsUnknown() {
		members = types.ListUnknown(
			MembersType{
				basetypes.ObjectType{
					AttrTypes: MembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"created_at":                              basetypes.StringType{},
		"custom_server_limit":                     basetypes.StringType{},
		"description":                             basetypes.StringType{},
		"discord_enabled":                         basetypes.BoolType{},
		"discord_notifications_database_backups":  basetypes.BoolType{},
		"discord_notifications_deployments":       basetypes.BoolType{},
		"discord_notifications_scheduled_tasks":   basetypes.BoolType{},
		"discord_notifications_server_disk_usage": basetypes.BoolType{},
		"discord_notifications_status_changes":    basetypes.BoolType{},
		"discord_notifications_test":              basetypes.BoolType{},
		"discord_webhook_url":                     basetypes.StringType{},
		"id":                                      basetypes.Int64Type{},
		"members": basetypes.ListType{
			ElemType: MembersValue{}.Type(ctx),
		},
		"name":                                    basetypes.StringType{},
		"personal_team":                           basetypes.BoolType{},
		"resend_api_key":                          basetypes.StringType{},
		"resend_enabled":                          basetypes.BoolType{},
		"show_boarding":                           basetypes.BoolType{},
		"smtp_enabled":                            basetypes.BoolType{},
		"smtp_encryption":                         basetypes.StringType{},
		"smtp_from_address":                       basetypes.StringType{},
		"smtp_from_name":                          basetypes.StringType{},
		"smtp_host":                               basetypes.StringType{},
		"smtp_notifications_database_backups":     basetypes.BoolType{},
		"smtp_notifications_deployments":          basetypes.BoolType{},
		"smtp_notifications_scheduled_tasks":      basetypes.BoolType{},
		"smtp_notifications_server_disk_usage":    basetypes.BoolType{},
		"smtp_notifications_status_changes":       basetypes.BoolType{},
		"smtp_notifications_test":                 basetypes.BoolType{},
		"smtp_password":                           basetypes.StringType{},
		"smtp_port":                               basetypes.StringType{},
		"smtp_recipients":                         basetypes.StringType{},
		"smtp_timeout":                            basetypes.StringType{},
		"smtp_username":                           basetypes.StringType{},
		"telegram_chat_id":                        basetypes.StringType{},
		"telegram_enabled":                        basetypes.BoolType{},
		"telegram_notifications_database_backups": basetypes.BoolType{},
		"telegram_notifications_database_backups_message_thread_id": basetypes.StringType{},
		"telegram_notifications_deployments":                        basetypes.BoolType{},
		"telegram_notifications_deployments_message_thread_id":      basetypes.StringType{},
		"telegram_notifications_scheduled_tasks":                    basetypes.BoolType{},
		"telegram_notifications_scheduled_tasks_thread_id":          basetypes.StringType{},
		"telegram_notifications_status_changes":                     basetypes.BoolType{},
		"telegram_notifications_status_changes_message_thread_id":   basetypes.StringType{},
		"telegram_notifications_test":                               basetypes.BoolType{},
		"telegram_notifications_test_message_thread_id":             basetypes.StringType{},
		"telegram_token":              basetypes.StringType{},
		"updated_at":                  basetypes.StringType{},
		"use_instance_email_settings": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":                              v.CreatedAt,
			"custom_server_limit":                     v.CustomServerLimit,
			"description":                             v.Description,
			"discord_enabled":                         v.DiscordEnabled,
			"discord_notifications_database_backups":  v.DiscordNotificationsDatabaseBackups,
			"discord_notifications_deployments":       v.DiscordNotificationsDeployments,
			"discord_notifications_scheduled_tasks":   v.DiscordNotificationsScheduledTasks,
			"discord_notifications_server_disk_usage": v.DiscordNotificationsServerDiskUsage,
			"discord_notifications_status_changes":    v.DiscordNotificationsStatusChanges,
			"discord_notifications_test":              v.DiscordNotificationsTest,
			"discord_webhook_url":                     v.DiscordWebhookUrl,
			"id":                                      v.Id,
			"members":                                 members,
			"name":                                    v.Name,
			"personal_team":                           v.PersonalTeam,
			"resend_api_key":                          v.ResendApiKey,
			"resend_enabled":                          v.ResendEnabled,
			"show_boarding":                           v.ShowBoarding,
			"smtp_enabled":                            v.SmtpEnabled,
			"smtp_encryption":                         v.SmtpEncryption,
			"smtp_from_address":                       v.SmtpFromAddress,
			"smtp_from_name":                          v.SmtpFromName,
			"smtp_host":                               v.SmtpHost,
			"smtp_notifications_database_backups":     v.SmtpNotificationsDatabaseBackups,
			"smtp_notifications_deployments":          v.SmtpNotificationsDeployments,
			"smtp_notifications_scheduled_tasks":      v.SmtpNotificationsScheduledTasks,
			"smtp_notifications_server_disk_usage":    v.SmtpNotificationsServerDiskUsage,
			"smtp_notifications_status_changes":       v.SmtpNotificationsStatusChanges,
			"smtp_notifications_test":                 v.SmtpNotificationsTest,
			"smtp_password":                           v.SmtpPassword,
			"smtp_port":                               v.SmtpPort,
			"smtp_recipients":                         v.SmtpRecipients,
			"smtp_timeout":                            v.SmtpTimeout,
			"smtp_username":                           v.SmtpUsername,
			"telegram_chat_id":                        v.TelegramChatId,
			"telegram_enabled":                        v.TelegramEnabled,
			"telegram_notifications_database_backups": v.TelegramNotificationsDatabaseBackups,
			"telegram_notifications_database_backups_message_thread_id": v.TelegramNotificationsDatabaseBackupsMessageThreadId,
			"telegram_notifications_deployments":                        v.TelegramNotificationsDeployments,
			"telegram_notifications_deployments_message_thread_id":      v.TelegramNotificationsDeploymentsMessageThreadId,
			"telegram_notifications_scheduled_tasks":                    v.TelegramNotificationsScheduledTasks,
			"telegram_notifications_scheduled_tasks_thread_id":          v.TelegramNotificationsScheduledTasksThreadId,
			"telegram_notifications_status_changes":                     v.TelegramNotificationsStatusChanges,
			"telegram_notifications_status_changes_message_thread_id":   v.TelegramNotificationsStatusChangesMessageThreadId,
			"telegram_notifications_test":                               v.TelegramNotificationsTest,
			"telegram_notifications_test_message_thread_id":             v.TelegramNotificationsTestMessageThreadId,
			"telegram_token":              v.TelegramToken,
			"updated_at":                  v.UpdatedAt,
			"use_instance_email_settings": v.UseInstanceEmailSettings,
		})

	return objVal, diags
}

func (v TeamsValue) Equal(o attr.Value) bool {
	other, ok := o.(TeamsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.CustomServerLimit.Equal(other.CustomServerLimit) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.DiscordEnabled.Equal(other.DiscordEnabled) {
		return false
	}

	if !v.DiscordNotificationsDatabaseBackups.Equal(other.DiscordNotificationsDatabaseBackups) {
		return false
	}

	if !v.DiscordNotificationsDeployments.Equal(other.DiscordNotificationsDeployments) {
		return false
	}

	if !v.DiscordNotificationsScheduledTasks.Equal(other.DiscordNotificationsScheduledTasks) {
		return false
	}

	if !v.DiscordNotificationsServerDiskUsage.Equal(other.DiscordNotificationsServerDiskUsage) {
		return false
	}

	if !v.DiscordNotificationsStatusChanges.Equal(other.DiscordNotificationsStatusChanges) {
		return false
	}

	if !v.DiscordNotificationsTest.Equal(other.DiscordNotificationsTest) {
		return false
	}

	if !v.DiscordWebhookUrl.Equal(other.DiscordWebhookUrl) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Members.Equal(other.Members) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PersonalTeam.Equal(other.PersonalTeam) {
		return false
	}

	if !v.ResendApiKey.Equal(other.ResendApiKey) {
		return false
	}

	if !v.ResendEnabled.Equal(other.ResendEnabled) {
		return false
	}

	if !v.ShowBoarding.Equal(other.ShowBoarding) {
		return false
	}

	if !v.SmtpEnabled.Equal(other.SmtpEnabled) {
		return false
	}

	if !v.SmtpEncryption.Equal(other.SmtpEncryption) {
		return false
	}

	if !v.SmtpFromAddress.Equal(other.SmtpFromAddress) {
		return false
	}

	if !v.SmtpFromName.Equal(other.SmtpFromName) {
		return false
	}

	if !v.SmtpHost.Equal(other.SmtpHost) {
		return false
	}

	if !v.SmtpNotificationsDatabaseBackups.Equal(other.SmtpNotificationsDatabaseBackups) {
		return false
	}

	if !v.SmtpNotificationsDeployments.Equal(other.SmtpNotificationsDeployments) {
		return false
	}

	if !v.SmtpNotificationsScheduledTasks.Equal(other.SmtpNotificationsScheduledTasks) {
		return false
	}

	if !v.SmtpNotificationsServerDiskUsage.Equal(other.SmtpNotificationsServerDiskUsage) {
		return false
	}

	if !v.SmtpNotificationsStatusChanges.Equal(other.SmtpNotificationsStatusChanges) {
		return false
	}

	if !v.SmtpNotificationsTest.Equal(other.SmtpNotificationsTest) {
		return false
	}

	if !v.SmtpPassword.Equal(other.SmtpPassword) {
		return false
	}

	if !v.SmtpPort.Equal(other.SmtpPort) {
		return false
	}

	if !v.SmtpRecipients.Equal(other.SmtpRecipients) {
		return false
	}

	if !v.SmtpTimeout.Equal(other.SmtpTimeout) {
		return false
	}

	if !v.SmtpUsername.Equal(other.SmtpUsername) {
		return false
	}

	if !v.TelegramChatId.Equal(other.TelegramChatId) {
		return false
	}

	if !v.TelegramEnabled.Equal(other.TelegramEnabled) {
		return false
	}

	if !v.TelegramNotificationsDatabaseBackups.Equal(other.TelegramNotificationsDatabaseBackups) {
		return false
	}

	if !v.TelegramNotificationsDatabaseBackupsMessageThreadId.Equal(other.TelegramNotificationsDatabaseBackupsMessageThreadId) {
		return false
	}

	if !v.TelegramNotificationsDeployments.Equal(other.TelegramNotificationsDeployments) {
		return false
	}

	if !v.TelegramNotificationsDeploymentsMessageThreadId.Equal(other.TelegramNotificationsDeploymentsMessageThreadId) {
		return false
	}

	if !v.TelegramNotificationsScheduledTasks.Equal(other.TelegramNotificationsScheduledTasks) {
		return false
	}

	if !v.TelegramNotificationsScheduledTasksThreadId.Equal(other.TelegramNotificationsScheduledTasksThreadId) {
		return false
	}

	if !v.TelegramNotificationsStatusChanges.Equal(other.TelegramNotificationsStatusChanges) {
		return false
	}

	if !v.TelegramNotificationsStatusChangesMessageThreadId.Equal(other.TelegramNotificationsStatusChangesMessageThreadId) {
		return false
	}

	if !v.TelegramNotificationsTest.Equal(other.TelegramNotificationsTest) {
		return false
	}

	if !v.TelegramNotificationsTestMessageThreadId.Equal(other.TelegramNotificationsTestMessageThreadId) {
		return false
	}

	if !v.TelegramToken.Equal(other.TelegramToken) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	if !v.UseInstanceEmailSettings.Equal(other.UseInstanceEmailSettings) {
		return false
	}

	return true
}

func (v TeamsValue) Type(ctx context.Context) attr.Type {
	return TeamsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TeamsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":                              basetypes.StringType{},
		"custom_server_limit":                     basetypes.StringType{},
		"description":                             basetypes.StringType{},
		"discord_enabled":                         basetypes.BoolType{},
		"discord_notifications_database_backups":  basetypes.BoolType{},
		"discord_notifications_deployments":       basetypes.BoolType{},
		"discord_notifications_scheduled_tasks":   basetypes.BoolType{},
		"discord_notifications_server_disk_usage": basetypes.BoolType{},
		"discord_notifications_status_changes":    basetypes.BoolType{},
		"discord_notifications_test":              basetypes.BoolType{},
		"discord_webhook_url":                     basetypes.StringType{},
		"id":                                      basetypes.Int64Type{},
		"members": basetypes.ListType{
			ElemType: MembersValue{}.Type(ctx),
		},
		"name":                                    basetypes.StringType{},
		"personal_team":                           basetypes.BoolType{},
		"resend_api_key":                          basetypes.StringType{},
		"resend_enabled":                          basetypes.BoolType{},
		"show_boarding":                           basetypes.BoolType{},
		"smtp_enabled":                            basetypes.BoolType{},
		"smtp_encryption":                         basetypes.StringType{},
		"smtp_from_address":                       basetypes.StringType{},
		"smtp_from_name":                          basetypes.StringType{},
		"smtp_host":                               basetypes.StringType{},
		"smtp_notifications_database_backups":     basetypes.BoolType{},
		"smtp_notifications_deployments":          basetypes.BoolType{},
		"smtp_notifications_scheduled_tasks":      basetypes.BoolType{},
		"smtp_notifications_server_disk_usage":    basetypes.BoolType{},
		"smtp_notifications_status_changes":       basetypes.BoolType{},
		"smtp_notifications_test":                 basetypes.BoolType{},
		"smtp_password":                           basetypes.StringType{},
		"smtp_port":                               basetypes.StringType{},
		"smtp_recipients":                         basetypes.StringType{},
		"smtp_timeout":                            basetypes.StringType{},
		"smtp_username":                           basetypes.StringType{},
		"telegram_chat_id":                        basetypes.StringType{},
		"telegram_enabled":                        basetypes.BoolType{},
		"telegram_notifications_database_backups": basetypes.BoolType{},
		"telegram_notifications_database_backups_message_thread_id": basetypes.StringType{},
		"telegram_notifications_deployments":                        basetypes.BoolType{},
		"telegram_notifications_deployments_message_thread_id":      basetypes.StringType{},
		"telegram_notifications_scheduled_tasks":                    basetypes.BoolType{},
		"telegram_notifications_scheduled_tasks_thread_id":          basetypes.StringType{},
		"telegram_notifications_status_changes":                     basetypes.BoolType{},
		"telegram_notifications_status_changes_message_thread_id":   basetypes.StringType{},
		"telegram_notifications_test":                               basetypes.BoolType{},
		"telegram_notifications_test_message_thread_id":             basetypes.StringType{},
		"telegram_token":              basetypes.StringType{},
		"updated_at":                  basetypes.StringType{},
		"use_instance_email_settings": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = MembersType{}

type MembersType struct {
	basetypes.ObjectType
}

func (t MembersType) Equal(o attr.Type) bool {
	other, ok := o.(MembersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MembersType) String() string {
	return "MembersType"
}

func (t MembersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return nil, diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	emailVerifiedAtAttribute, ok := attributes["email_verified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_verified_at is missing from object`)

		return nil, diags
	}

	emailVerifiedAtVal, ok := emailVerifiedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_verified_at expected to be basetypes.StringValue, was: %T`, emailVerifiedAtAttribute))
	}

	forcePasswordResetAttribute, ok := attributes["force_password_reset"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`force_password_reset is missing from object`)

		return nil, diags
	}

	forcePasswordResetVal, ok := forcePasswordResetAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`force_password_reset expected to be basetypes.BoolValue, was: %T`, forcePasswordResetAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	marketingEmailsAttribute, ok := attributes["marketing_emails"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`marketing_emails is missing from object`)

		return nil, diags
	}

	marketingEmailsVal, ok := marketingEmailsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`marketing_emails expected to be basetypes.BoolValue, was: %T`, marketingEmailsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	twoFactorConfirmedAtAttribute, ok := attributes["two_factor_confirmed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`two_factor_confirmed_at is missing from object`)

		return nil, diags
	}

	twoFactorConfirmedAtVal, ok := twoFactorConfirmedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`two_factor_confirmed_at expected to be basetypes.StringValue, was: %T`, twoFactorConfirmedAtAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MembersValue{
		CreatedAt:            createdAtVal,
		Email:                emailVal,
		EmailVerifiedAt:      emailVerifiedAtVal,
		ForcePasswordReset:   forcePasswordResetVal,
		Id:                   idVal,
		MarketingEmails:      marketingEmailsVal,
		Name:                 nameVal,
		TwoFactorConfirmedAt: twoFactorConfirmedAtVal,
		UpdatedAt:            updatedAtVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewMembersValueNull() MembersValue {
	return MembersValue{
		state: attr.ValueStateNull,
	}
}

func NewMembersValueUnknown() MembersValue {
	return MembersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMembersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MembersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MembersValue Attribute Value",
				"While creating a MembersValue value, a missing attribute value was detected. "+
					"A MembersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MembersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MembersValue Attribute Type",
				"While creating a MembersValue value, an invalid attribute value was detected. "+
					"A MembersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MembersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MembersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MembersValue Attribute Value",
				"While creating a MembersValue value, an extra attribute value was detected. "+
					"A MembersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MembersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMembersValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	emailVerifiedAtAttribute, ok := attributes["email_verified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_verified_at is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	emailVerifiedAtVal, ok := emailVerifiedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_verified_at expected to be basetypes.StringValue, was: %T`, emailVerifiedAtAttribute))
	}

	forcePasswordResetAttribute, ok := attributes["force_password_reset"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`force_password_reset is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	forcePasswordResetVal, ok := forcePasswordResetAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`force_password_reset expected to be basetypes.BoolValue, was: %T`, forcePasswordResetAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	marketingEmailsAttribute, ok := attributes["marketing_emails"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`marketing_emails is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	marketingEmailsVal, ok := marketingEmailsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`marketing_emails expected to be basetypes.BoolValue, was: %T`, marketingEmailsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	twoFactorConfirmedAtAttribute, ok := attributes["two_factor_confirmed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`two_factor_confirmed_at is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	twoFactorConfirmedAtVal, ok := twoFactorConfirmedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`two_factor_confirmed_at expected to be basetypes.StringValue, was: %T`, twoFactorConfirmedAtAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return NewMembersValueUnknown(), diags
	}

	return MembersValue{
		CreatedAt:            createdAtVal,
		Email:                emailVal,
		EmailVerifiedAt:      emailVerifiedAtVal,
		ForcePasswordReset:   forcePasswordResetVal,
		Id:                   idVal,
		MarketingEmails:      marketingEmailsVal,
		Name:                 nameVal,
		TwoFactorConfirmedAt: twoFactorConfirmedAtVal,
		UpdatedAt:            updatedAtVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewMembersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MembersValue {
	object, diags := NewMembersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMembersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MembersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMembersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMembersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMembersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMembersValueMust(MembersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MembersType) ValueType(ctx context.Context) attr.Value {
	return MembersValue{}
}

var _ basetypes.ObjectValuable = MembersValue{}

type MembersValue struct {
	CreatedAt            basetypes.StringValue `tfsdk:"created_at"`
	Email                basetypes.StringValue `tfsdk:"email"`
	EmailVerifiedAt      basetypes.StringValue `tfsdk:"email_verified_at"`
	ForcePasswordReset   basetypes.BoolValue   `tfsdk:"force_password_reset"`
	Id                   basetypes.Int64Value  `tfsdk:"id"`
	MarketingEmails      basetypes.BoolValue   `tfsdk:"marketing_emails"`
	Name                 basetypes.StringValue `tfsdk:"name"`
	TwoFactorConfirmedAt basetypes.StringValue `tfsdk:"two_factor_confirmed_at"`
	UpdatedAt            basetypes.StringValue `tfsdk:"updated_at"`
	state                attr.ValueState
}

func (v MembersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_verified_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["force_password_reset"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["marketing_emails"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["two_factor_confirmed_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Email.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email"] = val

		val, err = v.EmailVerifiedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_verified_at"] = val

		val, err = v.ForcePasswordReset.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["force_password_reset"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.MarketingEmails.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["marketing_emails"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.TwoFactorConfirmedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["two_factor_confirmed_at"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MembersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MembersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MembersValue) String() string {
	return "MembersValue"
}

func (v MembersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created_at":              basetypes.StringType{},
		"email":                   basetypes.StringType{},
		"email_verified_at":       basetypes.StringType{},
		"force_password_reset":    basetypes.BoolType{},
		"id":                      basetypes.Int64Type{},
		"marketing_emails":        basetypes.BoolType{},
		"name":                    basetypes.StringType{},
		"two_factor_confirmed_at": basetypes.StringType{},
		"updated_at":              basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":              v.CreatedAt,
			"email":                   v.Email,
			"email_verified_at":       v.EmailVerifiedAt,
			"force_password_reset":    v.ForcePasswordReset,
			"id":                      v.Id,
			"marketing_emails":        v.MarketingEmails,
			"name":                    v.Name,
			"two_factor_confirmed_at": v.TwoFactorConfirmedAt,
			"updated_at":              v.UpdatedAt,
		})

	return objVal, diags
}

func (v MembersValue) Equal(o attr.Value) bool {
	other, ok := o.(MembersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Email.Equal(other.Email) {
		return false
	}

	if !v.EmailVerifiedAt.Equal(other.EmailVerifiedAt) {
		return false
	}

	if !v.ForcePasswordReset.Equal(other.ForcePasswordReset) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.MarketingEmails.Equal(other.MarketingEmails) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.TwoFactorConfirmedAt.Equal(other.TwoFactorConfirmedAt) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	return true
}

func (v MembersValue) Type(ctx context.Context) attr.Type {
	return MembersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MembersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":              basetypes.StringType{},
		"email":                   basetypes.StringType{},
		"email_verified_at":       basetypes.StringType{},
		"force_password_reset":    basetypes.BoolType{},
		"id":                      basetypes.Int64Type{},
		"marketing_emails":        basetypes.BoolType{},
		"name":                    basetypes.StringType{},
		"two_factor_confirmed_at": basetypes.StringType{},
		"updated_at":              basetypes.StringType{},
	}
}
